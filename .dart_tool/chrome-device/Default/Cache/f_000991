define(['dart_sdk', 'packages/file_picker/src/file_picker_io.dart', 'packages/file_picker/src/platform_file.dart', 'packages/file_picker/src/file_picker_result.dart'], (function load__packages__file_picker___internal__file_picker_web_dart(dart_sdk, packages__file_picker__src__file_picker_io$46dart, packages__file_picker__src__platform_file$46dart, packages__file_picker__src__file_picker_result$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const html = dart_sdk.html;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const file_picker = packages__file_picker__src__file_picker_io$46dart.src__file_picker;
  const platform_file = packages__file_picker__src__platform_file$46dart.src__platform_file;
  const file_picker_result = packages__file_picker__src__file_picker_result$46dart.src__file_picker_result;
  var file_picker_web = Object.create(dart.library);
  var $children = dartx.children;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $length = dartx.length;
  var $onLoadEnd = dartx.onLoadEnd;
  var $result = dartx.result;
  var $readAsDataUrl = dartx.readAsDataUrl;
  var $forEach = dartx.forEach;
  var $removeEventListener = dartx.removeEventListener;
  var $onChange = dartx.onChange;
  var $addEventListener = dartx.addEventListener;
  var $clear = dartx.clear;
  var $isEmpty = dartx.isEmpty;
  var $fold = dartx.fold;
  var $onLoad = dartx.onLoad;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    ListOfPlatformFile: () => (T.ListOfPlatformFile = dart.constFn(core.List$(platform_file.PlatformFile)))(),
    ListNOfPlatformFile: () => (T.ListNOfPlatformFile = dart.constFn(dart.nullable(T.ListOfPlatformFile())))(),
    CompleterOfListNOfPlatformFile: () => (T.CompleterOfListNOfPlatformFile = dart.constFn(async.Completer$(T.ListNOfPlatformFile())))(),
    JSArrayOfPlatformFile: () => (T.JSArrayOfPlatformFile = dart.constFn(_interceptors.JSArray$(platform_file.PlatformFile)))(),
    Uint8ListN: () => (T.Uint8ListN = dart.constFn(dart.nullable(typed_data.Uint8List)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    StreamOfListOfint: () => (T.StreamOfListOfint = dart.constFn(async.Stream$(T.ListOfint())))(),
    StreamNOfListOfint: () => (T.StreamNOfListOfint = dart.constFn(dart.nullable(T.StreamOfListOfint())))(),
    FileAndUint8ListNAndStringN__Tovoid: () => (T.FileAndUint8ListNAndStringN__Tovoid = dart.constFn(dart.fnType(dart.void, [html.File, T.Uint8ListN(), T.StringN(), T.StreamNOfListOfint()])))(),
    ProgressEventTovoid: () => (T.ProgressEventTovoid = dart.constFn(dart.fnType(dart.void, [html.ProgressEvent])))(),
    FileTovoid: () => (T.FileTovoid = dart.constFn(dart.fnType(dart.void, [html.File])))(),
    dynamicTovoid: () => (T.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    FilePickerResultN: () => (T.FilePickerResultN = dart.constFn(dart.nullable(file_picker_result.FilePickerResult)))(),
    StringAndStringToString: () => (T.StringAndStringToString = dart.constFn(dart.fnType(core.String, [core.String, core.String])))(),
    _AsyncStarImplOfListOfint: () => (T._AsyncStarImplOfListOfint = dart.constFn(async._AsyncStarImpl$(T.ListOfint())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: file_picker.FileType.prototype,
        [_name]: "FileType.any",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: file_picker.FileType.prototype,
        [_name]: "FileType.audio",
        index: 4
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: file_picker.FileType.prototype,
        [_name]: "FileType.image",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: file_picker.FileType.prototype,
        [_name]: "FileType.video",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: file_picker.FileType.prototype,
        [_name]: "FileType.media",
        index: 1
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: file_picker.FileType.prototype,
        [_name]: "FileType.custom",
        index: 5
      });
    }
  }, false);
  var C = Array(6).fill(void 0);
  var I = [
    "file:///C:/flutter_windows_1.22.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/file_picker-3.0.3/lib/_internal/file_picker_web.dart",
    "package:file_picker/_internal/file_picker_web.dart"
  ];
  var __FilePickerWeb__target = dart.privateName(file_picker_web, "_#FilePickerWeb#_target");
  var __FilePickerWeb__target_isSet = dart.privateName(file_picker_web, "_#FilePickerWeb#_target#isSet");
  var _kFilePickerInputsDomId = dart.privateName(file_picker_web, "_kFilePickerInputsDomId");
  var _readStreamChunkSize = dart.privateName(file_picker_web, "_readStreamChunkSize");
  var _target = dart.privateName(file_picker_web, "_target");
  var _ensureInitialized = dart.privateName(file_picker_web, "_ensureInitialized");
  var _name = dart.privateName(file_picker, "_name");
  var _openFileReadStream = dart.privateName(file_picker_web, "_openFileReadStream");
  file_picker_web.FilePickerWeb = class FilePickerWeb extends file_picker.FilePicker {
    get [_target]() {
      let t0;
      return dart.test(this[__FilePickerWeb__target_isSet]) ? (t0 = this[__FilePickerWeb__target], t0) : dart.throw(new _internal.LateError.fieldNI("_target"));
    }
    set [_target](t0) {
      if (t0 == null) dart.nullFailed(I[0], 12, 16, "null");
      this[__FilePickerWeb__target_isSet] = true;
      this[__FilePickerWeb__target] = t0;
    }
    static registerWith(registrar) {
      if (registrar == null) dart.nullFailed(I[0], 23, 38, "registrar");
      file_picker.FilePicker.platform = file_picker_web.FilePickerWeb.platform;
    }
    [_ensureInitialized](id) {
      let t1;
      if (id == null) dart.nullFailed(I[0], 28, 37, "id");
      let target = html.querySelector("#" + dart.str(id));
      if (target == null) {
        let targetElement = (t1 = html.Element.tag("flt-file-picker-inputs"), (() => {
          t1.id = id;
          return t1;
        })());
        dart.nullCheck(html.querySelector("body"))[$children][$add](targetElement);
        target = targetElement;
      }
      return target;
    }
    pickFiles(opts) {
      let type = opts && 'type' in opts ? opts.type : C[0] || CT.C0;
      if (type == null) dart.nullFailed(I[0], 42, 14, "type");
      let allowedExtensions = opts && 'allowedExtensions' in opts ? opts.allowedExtensions : null;
      let allowMultiple = opts && 'allowMultiple' in opts ? opts.allowMultiple : false;
      if (allowMultiple == null) dart.nullFailed(I[0], 44, 10, "allowMultiple");
      let onFileLoading = opts && 'onFileLoading' in opts ? opts.onFileLoading : null;
      let allowCompression = opts && 'allowCompression' in opts ? opts.allowCompression : null;
      let withData = opts && 'withData' in opts ? opts.withData : true;
      let withReadStream = opts && 'withReadStream' in opts ? opts.withReadStream : false;
      return async.async(T.FilePickerResultN(), (function* pickFiles() {
        let t1, t1$;
        if (type != file_picker.FileType.custom && dart.test((t1$ = (t1 = allowedExtensions, t1 == null ? null : t1[$isNotEmpty]), t1$ == null ? false : t1$))) {
          dart.throw(core.Exception.new("You are setting a type [" + dart.str(type) + "]. Custom extension filters are only allowed with FileType.custom, please change it or remove filters."));
        }
        let filesCompleter = T.CompleterOfListNOfPlatformFile().new();
        let accept = file_picker_web.FilePickerWeb._fileType(type, allowedExtensions);
        let uploadInput = html.InputElement.as(html.FileUploadInputElement.new());
        uploadInput.draggable = true;
        uploadInput.multiple = allowMultiple;
        uploadInput.accept = accept;
        let changeEventTriggered = false;
        const changeEventListener = e => {
          if (changeEventTriggered) {
            return;
          }
          changeEventTriggered = true;
          let files = dart.nullCheck(uploadInput.files);
          let pickedFiles = T.JSArrayOfPlatformFile().of([]);
          function addPickedFile(file, bytes, path, readStream) {
            if (file == null) dart.nullFailed(I[0], 75, 14, "file");
            pickedFiles[$add](new platform_file.PlatformFile.new({name: file.name, path: path, size: bytes != null ? bytes[$length] : file.size, bytes: bytes, readStream: readStream}));
            if (dart.notNull(pickedFiles[$length]) >= dart.notNull(files[$length])) {
              filesCompleter.complete(pickedFiles);
            }
          }
          dart.fn(addPickedFile, T.FileAndUint8ListNAndStringN__Tovoid());
          files[$forEach](dart.fn(file => {
            if (file == null) dart.nullFailed(I[0], 93, 27, "file");
            if (dart.nullCheck(withReadStream)) {
              addPickedFile(file, null, null, this[_openFileReadStream](file));
              return;
            }
            if (!dart.nullCheck(withData)) {
              let reader = html.FileReader.new();
              reader[$onLoadEnd].listen(dart.fn(e => {
                if (e == null) dart.nullFailed(I[0], 101, 36, "e");
                addPickedFile(file, null, T.StringN().as(reader[$result]), null);
              }, T.ProgressEventTovoid()));
              reader[$readAsDataUrl](file);
              return;
            }
            let reader = html.FileReader.new();
            reader[$onLoadEnd].listen(dart.fn(e => {
              if (e == null) dart.nullFailed(I[0], 109, 34, "e");
              addPickedFile(file, T.Uint8ListN().as(reader[$result]), null, null);
            }, T.ProgressEventTovoid()));
            reader.readAsArrayBuffer(file);
          }, T.FileTovoid()));
        };
        dart.fn(changeEventListener, T.dynamicTovoid());
        function cancelledEventListener(_) {
          html.window[$removeEventListener]("focus", cancelledEventListener);
          async.Future.delayed(new core.Duration.new({milliseconds: 500})).then(core.Null, dart.fn(value => {
            if (!changeEventTriggered) {
              changeEventTriggered = true;
              filesCompleter.complete(null);
            }
          }, T.dynamicToNull()));
        }
        dart.fn(cancelledEventListener, T.dynamicTovoid());
        uploadInput[$onChange].listen(changeEventListener);
        uploadInput[$addEventListener]("change", changeEventListener);
        html.window[$addEventListener]("focus", cancelledEventListener);
        this[_target][$children][$clear]();
        this[_target][$children][$add](uploadInput);
        uploadInput.click();
        let files = (yield filesCompleter.future);
        return files == null ? null : new file_picker_result.FilePickerResult.new(files);
      }).bind(this));
    }
    static _fileType(type, allowedExtensions) {
      if (type == null) dart.nullFailed(I[0], 146, 36, "type");
      switch (type) {
        case C[0] || CT.C0:
        {
          return "";
        }
        case C[1] || CT.C1:
        {
          return "audio/*";
        }
        case C[2] || CT.C2:
        {
          return "image/*";
        }
        case C[3] || CT.C3:
        {
          return "video/*";
        }
        case C[4] || CT.C4:
        {
          return "video/*|image/*";
        }
        case C[5] || CT.C5:
        {
          return dart.nullCheck(allowedExtensions)[$fold](core.String, "", dart.fn((prev, next) => {
            if (prev == null) dart.nullFailed(I[0], 165, 24, "prev");
            if (next == null) dart.nullFailed(I[0], 165, 30, "next");
            return (prev[$isEmpty] ? "" : dart.str(prev) + ",") + " ." + dart.str(next);
          }, T.StringAndStringToString()));
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    [_openFileReadStream](file) {
      if (file == null) dart.nullFailed(I[0], 169, 46, "file");
      return new (T._AsyncStarImplOfListOfint()).new((function* _openFileReadStream(stream) {
        let reader = html.FileReader.new();
        let start = 0;
        while (start < dart.notNull(file.size)) {
          let end = start + dart.notNull(this[_readStreamChunkSize]) > dart.notNull(file.size) ? file.size : start + dart.notNull(this[_readStreamChunkSize]);
          let blob = file.slice(start, end);
          reader.readAsArrayBuffer(blob);
          yield reader[$onLoad].first;
          if (stream.add(T.ListOfint().as(reader[$result]))) return;
          yield;
          start = start + dart.notNull(this[_readStreamChunkSize]);
        }
      }).bind(this)).stream;
    }
  };
  (file_picker_web.FilePickerWeb.__ = function() {
    this[__FilePickerWeb__target] = null;
    this[__FilePickerWeb__target_isSet] = false;
    this[_kFilePickerInputsDomId] = "__file_picker_web-file-input";
    this[_readStreamChunkSize] = 1000 * 1000;
    file_picker_web.FilePickerWeb.__proto__.new.call(this);
    this[_target] = this[_ensureInitialized](this[_kFilePickerInputsDomId]);
  }).prototype = file_picker_web.FilePickerWeb.prototype;
  dart.addTypeTests(file_picker_web.FilePickerWeb);
  dart.addTypeCaches(file_picker_web.FilePickerWeb);
  dart.setMethodSignature(file_picker_web.FilePickerWeb, () => ({
    __proto__: dart.getMethods(file_picker_web.FilePickerWeb.__proto__),
    [_ensureInitialized]: dart.fnType(html.Element, [core.String]),
    pickFiles: dart.fnType(async.Future$(dart.nullable(file_picker_result.FilePickerResult)), [], {allowCompression: dart.nullable(core.bool), allowMultiple: core.bool, allowedExtensions: dart.nullable(core.List$(core.String)), onFileLoading: dart.nullable(dart.fnType(dart.dynamic, [file_picker.FilePickerStatus])), type: file_picker.FileType, withData: dart.nullable(core.bool), withReadStream: dart.nullable(core.bool)}, {}),
    [_openFileReadStream]: dart.fnType(async.Stream$(core.List$(core.int)), [html.File])
  }));
  dart.setGetterSignature(file_picker_web.FilePickerWeb, () => ({
    __proto__: dart.getGetters(file_picker_web.FilePickerWeb.__proto__),
    [_target]: html.Element
  }));
  dart.setSetterSignature(file_picker_web.FilePickerWeb, () => ({
    __proto__: dart.getSetters(file_picker_web.FilePickerWeb.__proto__),
    [_target]: html.Element
  }));
  dart.setLibraryUri(file_picker_web.FilePickerWeb, I[1]);
  dart.setFieldSignature(file_picker_web.FilePickerWeb, () => ({
    __proto__: dart.getFields(file_picker_web.FilePickerWeb.__proto__),
    [__FilePickerWeb__target]: dart.fieldType(dart.nullable(html.Element)),
    [__FilePickerWeb__target_isSet]: dart.fieldType(core.bool),
    [_kFilePickerInputsDomId]: dart.finalFieldType(core.String),
    [_readStreamChunkSize]: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(file_picker_web.FilePickerWeb, {
    /*file_picker_web.FilePickerWeb.platform*/get platform() {
      return new file_picker_web.FilePickerWeb.__();
    }
  }, false);
  dart.trackLibraries("packages/file_picker/_internal/file_picker_web.dart", {
    "package:file_picker/_internal/file_picker_web.dart": file_picker_web
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["file_picker_web.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/file_picker/_internal/file_picker_web.dart.lib.js"}');
  // Exports:
  return {
    _internal__file_picker_web: file_picker_web
  };
}));

//# sourceMappingURL=file_picker_web.dart.lib.js.map
