define(['dart_sdk', 'packages/sqflite_common/src/value_utils.dart'], (function load__packages__sqflite_common__src__sql_builder_dart(dart_sdk, packages__sqflite_common__src__value_utils$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const value_utils = packages__sqflite_common__src__value_utils$46dart.src__value_utils;
  var sql_builder = Object.create(dart.library);
  var $isNotEmpty = dartx.isNotEmpty;
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $length = dartx.length;
  var $add = dartx.add;
  var $forEach = dartx.forEach;
  var $isEmpty = dartx.isEmpty;
  var $keys = dartx.keys;
  var $addAll = dartx.addAll;
  var $codeUnits = dartx.codeUnits;
  var $substring = dartx.substring;
  var $toLowerCase = dartx.toLowerCase;
  var $first = dartx.first;
  var $last = dartx.last;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    ConflictAlgorithmL: () => (T.ConflictAlgorithmL = dart.constFn(dart.legacy(sql_builder.ConflictAlgorithm)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ListOfObjectN: () => (T.ListOfObjectN = dart.constFn(core.List$(T.ObjectN())))(),
    JSArrayOfObjectN: () => (T.JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(T.ObjectN())))(),
    StringAndObjectNTovoid: () => (T.StringAndObjectNTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T.ObjectN()])))(),
    StringTovoid: () => (T.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    LinkedHashSetOfString: () => (T.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: sql_builder.ConflictAlgorithm.prototype,
        [_name$]: "ConflictAlgorithm.rollback",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: sql_builder.ConflictAlgorithm.prototype,
        [_name$]: "ConflictAlgorithm.abort",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: sql_builder.ConflictAlgorithm.prototype,
        [_name$]: "ConflictAlgorithm.fail",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: sql_builder.ConflictAlgorithm.prototype,
        [_name$]: "ConflictAlgorithm.ignore",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: sql_builder.ConflictAlgorithm.prototype,
        [_name$]: "ConflictAlgorithm.replace",
        index: 4
      });
    },
    get C5() {
      return C[5] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4], T.ConflictAlgorithmL());
    }
  }, false);
  var C = Array(6).fill(void 0);
  var I = [
    "file:///C:/flutter_windows_1.22.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/sqflite_common-2.0.0+2/lib/src/sql_builder.dart",
    "package:sqflite_common/src/sql_builder.dart"
  ];
  var _name$ = dart.privateName(sql_builder, "_name");
  sql_builder.ConflictAlgorithm = class ConflictAlgorithm extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (sql_builder.ConflictAlgorithm.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 4, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 4, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = sql_builder.ConflictAlgorithm.prototype;
  dart.addTypeTests(sql_builder.ConflictAlgorithm);
  dart.addTypeCaches(sql_builder.ConflictAlgorithm);
  dart.setLibraryUri(sql_builder.ConflictAlgorithm, I[1]);
  dart.setFieldSignature(sql_builder.ConflictAlgorithm, () => ({
    __proto__: dart.getFields(sql_builder.ConflictAlgorithm.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(sql_builder.ConflictAlgorithm, ['toString']);
  sql_builder.ConflictAlgorithm.rollback = C[0] || CT.C0;
  sql_builder.ConflictAlgorithm.abort = C[1] || CT.C1;
  sql_builder.ConflictAlgorithm.fail = C[2] || CT.C2;
  sql_builder.ConflictAlgorithm.ignore = C[3] || CT.C3;
  sql_builder.ConflictAlgorithm.replace = C[4] || CT.C4;
  sql_builder.ConflictAlgorithm.values = C[5] || CT.C5;
  var $arguments = dart.privateName(sql_builder, "SqlBuilder.arguments");
  var hasEscape = dart.privateName(sql_builder, "SqlBuilder.hasEscape");
  var __SqlBuilder_sql = dart.privateName(sql_builder, "_#SqlBuilder#sql");
  var __SqlBuilder_sql_isSet = dart.privateName(sql_builder, "_#SqlBuilder#sql#isSet");
  var _escapeName = dart.privateName(sql_builder, "_escapeName");
  var _writeClause = dart.privateName(sql_builder, "_writeClause");
  var _writeColumns = dart.privateName(sql_builder, "_writeColumns");
  sql_builder.SqlBuilder = class SqlBuilder extends core.Object {
    get arguments() {
      return this[$arguments];
    }
    set arguments(value) {
      this[$arguments] = value;
    }
    get hasEscape() {
      return this[hasEscape];
    }
    set hasEscape(value) {
      this[hasEscape] = value;
    }
    get sql() {
      let t0;
      return dart.test(this[__SqlBuilder_sql_isSet]) ? (t0 = this[__SqlBuilder_sql], t0) : dart.throw(new _internal.LateError.fieldNI("sql"));
    }
    set sql(t0) {
      if (t0 == null) dart.nullFailed(I[0], 251, 15, "null");
      this[__SqlBuilder_sql_isSet] = true;
      this[__SqlBuilder_sql] = t0;
    }
    [_escapeName](name) {
      if (name == null) dart.nullFailed(I[0], 259, 29, "name");
      return sql_builder.escapeName(name);
    }
    [_writeClause](s, name, clause) {
      if (s == null) dart.nullFailed(I[0], 261, 34, "s");
      if (name == null) dart.nullFailed(I[0], 261, 44, "name");
      if (clause != null) {
        s.write(name);
        s.write(clause);
      }
    }
    [_writeColumns](s, columns) {
      if (s == null) dart.nullFailed(I[0], 270, 35, "s");
      if (columns == null) dart.nullFailed(I[0], 270, 51, "columns");
      let n = columns[$length];
      for (let i = 0; i < dart.notNull(n); i = i + 1) {
        let column = columns[$_get](i);
        if (i > 0) {
          s.write(", ");
        }
        s.write(this[_escapeName](column));
      }
      s.write(" ");
    }
  };
  (sql_builder.SqlBuilder.delete = function(table, opts) {
    if (table == null) dart.nullFailed(I[0], 64, 28, "table");
    let where = opts && 'where' in opts ? opts.where : null;
    let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
    this[__SqlBuilder_sql] = null;
    this[__SqlBuilder_sql_isSet] = false;
    this[$arguments] = null;
    this[hasEscape] = false;
    value_utils.checkWhereArgs(whereArgs);
    let $delete = new core.StringBuffer.new();
    $delete.write("DELETE FROM ");
    $delete.write(this[_escapeName](table));
    this[_writeClause]($delete, " WHERE ", where);
    this.sql = $delete.toString();
    this.arguments = whereArgs != null ? T.ListOfObjectN().from(whereArgs) : null;
  }).prototype = sql_builder.SqlBuilder.prototype;
  (sql_builder.SqlBuilder.query = function(table, opts) {
    if (table == null) dart.nullFailed(I[0], 97, 27, "table");
    let distinct = opts && 'distinct' in opts ? opts.distinct : null;
    let columns = opts && 'columns' in opts ? opts.columns : null;
    let where = opts && 'where' in opts ? opts.where : null;
    let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
    let groupBy = opts && 'groupBy' in opts ? opts.groupBy : null;
    let having = opts && 'having' in opts ? opts.having : null;
    let orderBy = opts && 'orderBy' in opts ? opts.orderBy : null;
    let limit = opts && 'limit' in opts ? opts.limit : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    this[__SqlBuilder_sql] = null;
    this[__SqlBuilder_sql_isSet] = false;
    this[$arguments] = null;
    this[hasEscape] = false;
    if (groupBy == null && having != null) {
      dart.throw(new core.ArgumentError.new("HAVING clauses are only permitted when using a groupBy clause"));
    }
    value_utils.checkWhereArgs(whereArgs);
    let query = new core.StringBuffer.new();
    query.write("SELECT ");
    if (distinct === true) {
      query.write("DISTINCT ");
    }
    if (columns != null && dart.test(columns[$isNotEmpty])) {
      this[_writeColumns](query, columns);
    } else {
      query.write("* ");
    }
    query.write("FROM ");
    query.write(this[_escapeName](table));
    this[_writeClause](query, " WHERE ", where);
    this[_writeClause](query, " GROUP BY ", groupBy);
    this[_writeClause](query, " HAVING ", having);
    this[_writeClause](query, " ORDER BY ", orderBy);
    if (limit != null) {
      this[_writeClause](query, " LIMIT ", dart.toString(limit));
    }
    if (offset != null) {
      this[_writeClause](query, " OFFSET ", dart.toString(offset));
    }
    this.sql = query.toString();
    this.arguments = whereArgs != null ? T.ListOfObjectN().from(whereArgs) : null;
  }).prototype = sql_builder.SqlBuilder.prototype;
  (sql_builder.SqlBuilder.insert = function(table, values, opts) {
    if (table == null) dart.nullFailed(I[0], 147, 28, "table");
    if (values == null) dart.nullFailed(I[0], 147, 56, "values");
    let nullColumnHack = opts && 'nullColumnHack' in opts ? opts.nullColumnHack : null;
    let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
    this[__SqlBuilder_sql] = null;
    this[__SqlBuilder_sql_isSet] = false;
    this[$arguments] = null;
    this[hasEscape] = false;
    let insert = new core.StringBuffer.new();
    insert.write("INSERT");
    if (conflictAlgorithm != null) {
      insert.write(" " + dart.str(sql_builder._conflictValues[$_get](conflictAlgorithm.index)));
    }
    insert.write(" INTO ");
    insert.write(this[_escapeName](table));
    insert.write(" (");
    let bindArgs = null;
    let size = values[$length];
    if (dart.notNull(size) > 0) {
      let sbValues = new core.StringBuffer.new(") VALUES (");
      bindArgs = T.JSArrayOfObjectN().of([]);
      let i = 0;
      values[$forEach](dart.fn((colName, value) => {
        let t0;
        if (colName == null) dart.nullFailed(I[0], 166, 30, "colName");
        if ((t0 = i, i = t0 + 1, t0) > 0) {
          insert.write(", ");
          sbValues.write(", ");
        }
        insert.write(this[_escapeName](colName));
        if (value == null) {
          sbValues.write("NULL");
        } else {
          value_utils.checkNonNullValue(value);
          dart.nullCheck(bindArgs)[$add](value);
          sbValues.write("?");
        }
      }, T.StringAndObjectNTovoid()));
      insert.write(sbValues);
    } else {
      if (nullColumnHack == null) {
        dart.throw(new core.ArgumentError.new("nullColumnHack required when inserting no data"));
      }
      insert.write(dart.notNull(nullColumnHack) + ") VALUES (NULL");
    }
    insert.write(")");
    this.sql = insert.toString();
    this.arguments = bindArgs;
  }).prototype = sql_builder.SqlBuilder.prototype;
  (sql_builder.SqlBuilder.update = function(table, values, opts) {
    if (table == null) dart.nullFailed(I[0], 207, 28, "table");
    if (values == null) dart.nullFailed(I[0], 207, 56, "values");
    let where = opts && 'where' in opts ? opts.where : null;
    let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
    let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
    this[__SqlBuilder_sql] = null;
    this[__SqlBuilder_sql_isSet] = false;
    this[$arguments] = null;
    this[hasEscape] = false;
    if (dart.test(values[$isEmpty])) {
      dart.throw(new core.ArgumentError.new("Empty values"));
    }
    value_utils.checkWhereArgs(whereArgs);
    let update = new core.StringBuffer.new();
    update.write("UPDATE");
    if (conflictAlgorithm != null) {
      update.write(" " + dart.str(sql_builder._conflictValues[$_get](conflictAlgorithm.index)));
    }
    update.write(" " + dart.str(this[_escapeName](table)));
    update.write(" SET ");
    let bindArgs = T.JSArrayOfObjectN().of([]);
    let i = 0;
    values[$keys][$forEach](dart.fn(colName => {
      let t0;
      if (colName == null) dart.nullFailed(I[0], 227, 33, "colName");
      update.write((t0 = i, i = t0 + 1, t0) > 0 ? ", " : "");
      update.write(this[_escapeName](colName));
      let value = values[$_get](colName);
      if (value != null) {
        value_utils.checkNonNullValue(value);
        bindArgs[$add](value);
        update.write(" = ?");
      } else {
        update.write(" = NULL");
      }
    }, T.StringTovoid()));
    if (whereArgs != null) {
      bindArgs[$addAll](whereArgs);
    }
    this[_writeClause](update, " WHERE ", where);
    this.sql = update.toString();
    this.arguments = bindArgs;
  }).prototype = sql_builder.SqlBuilder.prototype;
  dart.addTypeTests(sql_builder.SqlBuilder);
  dart.addTypeCaches(sql_builder.SqlBuilder);
  dart.setMethodSignature(sql_builder.SqlBuilder, () => ({
    __proto__: dart.getMethods(sql_builder.SqlBuilder.__proto__),
    [_escapeName]: dart.fnType(core.String, [core.String]),
    [_writeClause]: dart.fnType(dart.void, [core.StringBuffer, core.String, dart.nullable(core.String)]),
    [_writeColumns]: dart.fnType(dart.void, [core.StringBuffer, core.List$(core.String)])
  }));
  dart.setGetterSignature(sql_builder.SqlBuilder, () => ({
    __proto__: dart.getGetters(sql_builder.SqlBuilder.__proto__),
    sql: core.String
  }));
  dart.setSetterSignature(sql_builder.SqlBuilder, () => ({
    __proto__: dart.getSetters(sql_builder.SqlBuilder.__proto__),
    sql: core.String
  }));
  dart.setLibraryUri(sql_builder.SqlBuilder, I[1]);
  dart.setFieldSignature(sql_builder.SqlBuilder, () => ({
    __proto__: dart.getFields(sql_builder.SqlBuilder.__proto__),
    [__SqlBuilder_sql]: dart.fieldType(dart.nullable(core.String)),
    [__SqlBuilder_sql_isSet]: dart.fieldType(core.bool),
    arguments: dart.fieldType(dart.nullable(core.List$(dart.nullable(core.Object)))),
    hasEscape: dart.fieldType(core.bool)
  }));
  sql_builder.isEscapedName = function isEscapedName(name) {
    if (name == null) dart.nullFailed(I[0], 286, 27, "name");
    if (name.length >= 2) {
      let codeUnits = name[$codeUnits];
      if (dart.test(sql_builder._areCodeUnitsEscaped(codeUnits))) {
        return sql_builder.escapeNames.contains(name[$substring](1, name.length - 1)[$toLowerCase]());
      }
    }
    return false;
  };
  sql_builder._doEscape = function _doEscape(name) {
    if (name == null) dart.nullFailed(I[0], 299, 25, "name");
    return "\"" + dart.str(name) + "\"";
  };
  sql_builder.escapeName = function escapeName(name) {
    if (name == null) dart.nullFailed(I[0], 305, 26, "name");
    if (dart.test(sql_builder.escapeNames.contains(name[$toLowerCase]()))) {
      return sql_builder._doEscape(name);
    }
    return name;
  };
  sql_builder.unescapeName = function unescapeName(name) {
    if (name == null) dart.nullFailed(I[0], 313, 28, "name");
    if (dart.test(sql_builder.isEscapedName(name))) {
      return name[$substring](1, name.length - 1);
    }
    return name;
  };
  sql_builder.escapeEntityName = function escapeEntityName(name) {
    if (name == null) dart.nullFailed(I[0], 323, 32, "name");
    if (dart.test(sql_builder._entityNameNeedEscape(name))) {
      return sql_builder._doEscape(name);
    }
    return name;
  };
  sql_builder._isDigit = function _isDigit(codeUnit) {
    if (codeUnit == null) dart.nullFailed(I[0], 348, 19, "codeUnit");
    return dart.notNull(codeUnit) >= 48 && dart.notNull(codeUnit) <= 57;
  };
  sql_builder._isAlphaOrUnderscore = function _isAlphaOrUnderscore(codeUnit) {
    if (codeUnit == null) dart.nullFailed(I[0], 351, 31, "codeUnit");
    return dart.notNull(codeUnit) >= 97 && dart.notNull(codeUnit) <= 122 || dart.notNull(codeUnit) >= 65 && dart.notNull(codeUnit) <= 90 || codeUnit === 95;
  };
  sql_builder._areCodeUnitsEscaped = function _areCodeUnitsEscaped(codeUnits) {
    if (codeUnits == null) dart.nullFailed(I[0], 357, 37, "codeUnits");
    if (dart.test(codeUnits[$isNotEmpty])) {
      let first = codeUnits[$first];
      switch (first) {
        case 34:
        case 96:
        {
          let last = codeUnits[$last];
          return last == first;
        }
        case 39:
      }
    }
    return false;
  };
  sql_builder._entityNameNeedEscape = function _entityNameNeedEscape(name) {
    if (name == null) dart.nullFailed(I[0], 372, 35, "name");
    if (dart.test(sql_builder.escapeNames.contains(name[$toLowerCase]()))) {
      return true;
    }
    let codeUnits = name[$codeUnits];
    if (!dart.test(sql_builder._isAlphaOrUnderscore(codeUnits[$first]))) {
      return true;
    }
    for (let i = 1; i < dart.notNull(codeUnits[$length]); i = i + 1) {
      let codeUnit = codeUnits[$_get](i);
      if (!dart.test(sql_builder._isAlphaOrUnderscore(codeUnit)) && !dart.test(sql_builder._isDigit(codeUnit))) {
        return true;
      }
    }
    return false;
  };
  sql_builder.unescapeValueKeyName = function unescapeValueKeyName(name) {
    if (name == null) dart.nullFailed(I[0], 395, 36, "name");
    let codeUnits = name[$codeUnits];
    if (dart.test(sql_builder._areCodeUnitsEscaped(codeUnits))) {
      return name[$substring](1, name.length - 1);
    }
    return name;
  };
  dart.defineLazy(sql_builder, {
    /*sql_builder._conflictValues*/get _conflictValues() {
      return T.JSArrayOfString().of(["OR ROLLBACK", "OR ABORT", "OR FAIL", "OR IGNORE", "OR REPLACE"]);
    },
    /*sql_builder._lowercaseA*/get _lowercaseA() {
      return 97;
    },
    /*sql_builder._lowercaseZ*/get _lowercaseZ() {
      return 122;
    },
    /*sql_builder._underscore*/get _underscore() {
      return 95;
    },
    /*sql_builder._digit0*/get _digit0() {
      return 48;
    },
    /*sql_builder._digit9*/get _digit9() {
      return 57;
    },
    /*sql_builder._backtick*/get _backtick() {
      return 96;
    },
    /*sql_builder._doubleQuote*/get _doubleQuote() {
      return 34;
    },
    /*sql_builder._singleQuote*/get _singleQuote() {
      return 39;
    },
    /*sql_builder._uppercaseA*/get _uppercaseA() {
      return 65;
    },
    /*sql_builder._uppercaseZ*/get _uppercaseZ() {
      return 90;
    },
    /*sql_builder.escapeNames*/get escapeNames() {
      return T.LinkedHashSetOfString().from(["add", "all", "alter", "and", "as", "autoincrement", "between", "case", "check", "collate", "commit", "constraint", "create", "default", "deferrable", "delete", "distinct", "drop", "else", "escape", "except", "exists", "foreign", "from", "group", "having", "if", "in", "index", "insert", "intersect", "into", "is", "isnull", "join", "limit", "not", "notnull", "null", "on", "or", "order", "primary", "references", "select", "set", "table", "then", "to", "transaction", "union", "unique", "update", "using", "values", "when", "where"]);
    }
  }, false);
  dart.trackLibraries("packages/sqflite_common/src/sql_builder.dart", {
    "package:sqflite_common/src/sql_builder.dart": sql_builder
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["sql_builder.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/sqflite_common/src/sql_builder.dart.lib.js"}');
  // Exports:
  return {
    src__sql_builder: sql_builder
  };
}));

//# sourceMappingURL=sql_builder.dart.lib.js.map
