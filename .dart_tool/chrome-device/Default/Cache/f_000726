define(['dart_sdk', 'packages/intl/src/intl/date_computation.dart', 'packages/clock/src/stopwatch.dart'], (function load__packages__intl__src__intl__date_builder_dart(dart_sdk, packages__intl__src__intl__date_computation$46dart, packages__clock__src__stopwatch$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const date_computation = packages__intl__src__intl__date_computation$46dart.src__intl__date_computation;
  const $default = packages__clock__src__stopwatch$46dart.src__default;
  var date_builder = Object.create(dart.library);
  var $truncate = dartx.truncate;
  dart._checkModuleNullSafetyMode(false);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "file:///C:/flutter_windows_1.22.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/intl-0.17.0/lib/src/intl/date_builder.dart",
    "package:intl/src/intl/date_builder.dart"
  ];
  var year = dart.privateName(date_builder, "DateBuilder.year");
  var month = dart.privateName(date_builder, "DateBuilder.month");
  var day = dart.privateName(date_builder, "DateBuilder.day");
  var dayOfYear = dart.privateName(date_builder, "DateBuilder.dayOfYear");
  var hour = dart.privateName(date_builder, "DateBuilder.hour");
  var minute = dart.privateName(date_builder, "DateBuilder.minute");
  var second = dart.privateName(date_builder, "DateBuilder.second");
  var fractionalSecond = dart.privateName(date_builder, "DateBuilder.fractionalSecond");
  var pm = dart.privateName(date_builder, "DateBuilder.pm");
  var utc = dart.privateName(date_builder, "DateBuilder.utc");
  var dateOnly = dart.privateName(date_builder, "DateBuilder.dateOnly");
  var _hasAmbiguousCentury = dart.privateName(date_builder, "_hasAmbiguousCentury");
  var _date = dart.privateName(date_builder, "_date");
  var _retried = dart.privateName(date_builder, "_retried");
  var _locale$ = dart.privateName(date_builder, "_locale");
  var _dateTimeConstructor$ = dart.privateName(date_builder, "_dateTimeConstructor");
  var _verify = dart.privateName(date_builder, "_verify");
  var _offsetYear = dart.privateName(date_builder, "_offsetYear");
  var _correctForErrors = dart.privateName(date_builder, "_correctForErrors");
  date_builder.DateBuilder = class DateBuilder extends core.Object {
    get year() {
      return this[year];
    }
    set year(value) {
      this[year] = value;
    }
    get month() {
      return this[month];
    }
    set month(value) {
      this[month] = value;
    }
    get day() {
      return this[day];
    }
    set day(value) {
      this[day] = value;
    }
    get dayOfYear() {
      return this[dayOfYear];
    }
    set dayOfYear(value) {
      this[dayOfYear] = value;
    }
    get hour() {
      return this[hour];
    }
    set hour(value) {
      this[hour] = value;
    }
    get minute() {
      return this[minute];
    }
    set minute(value) {
      this[minute] = value;
    }
    get second() {
      return this[second];
    }
    set second(value) {
      this[second] = value;
    }
    get fractionalSecond() {
      return this[fractionalSecond];
    }
    set fractionalSecond(value) {
      this[fractionalSecond] = value;
    }
    get pm() {
      return this[pm];
    }
    set pm(value) {
      this[pm] = value;
    }
    get utc() {
      return this[utc];
    }
    set utc(value) {
      this[utc] = value;
    }
    get dateOnly() {
      return this[dateOnly];
    }
    set dateOnly(value) {
      this[dateOnly] = value;
    }
    setYear(x) {
      if (x == null) dart.nullFailed(I[0], 66, 20, "x");
      this.year = x;
    }
    setHasAmbiguousCentury(isAmbiguous) {
      if (isAmbiguous == null) dart.nullFailed(I[0], 72, 36, "isAmbiguous");
      this[_hasAmbiguousCentury] = isAmbiguous;
    }
    setMonth(x) {
      if (x == null) dart.nullFailed(I[0], 76, 21, "x");
      this.month = x;
    }
    setDay(x) {
      if (x == null) dart.nullFailed(I[0], 80, 19, "x");
      this.day = x;
    }
    setDayOfYear(x) {
      if (x == null) dart.nullFailed(I[0], 84, 25, "x");
      this.dayOfYear = x;
    }
    get dayOrDayOfYear() {
      return this.dayOfYear === 0 ? this.day : this.dayOfYear;
    }
    setHour(x) {
      if (x == null) dart.nullFailed(I[0], 92, 20, "x");
      this.hour = x;
    }
    setMinute(x) {
      if (x == null) dart.nullFailed(I[0], 96, 22, "x");
      this.minute = x;
    }
    setSecond(x) {
      if (x == null) dart.nullFailed(I[0], 100, 22, "x");
      this.second = x;
    }
    setFractionalSecond(x) {
      if (x == null) dart.nullFailed(I[0], 104, 32, "x");
      this.fractionalSecond = x;
    }
    get hour24() {
      return dart.test(this.pm) ? dart.notNull(this.hour) + 12 : this.hour;
    }
    verify(s) {
      if (s == null) dart.nullFailed(I[0], 113, 22, "s");
      this[_verify](this.month, 1, 12, "month", s);
      this[_verify](this.hour24, 0, 23, "hour", s);
      this[_verify](this.minute, 0, 59, "minute", s);
      this[_verify](this.second, 0, 59, "second", s);
      this[_verify](this.fractionalSecond, 0, 999, "fractional second", s);
      let date = this.asDate();
      let minimumDate = dart.test(this.dateOnly) && date.hour === 1 ? 0 : date.hour;
      this[_verify](this.hour24, minimumDate, date.hour, "hour", s, date);
      if (dart.notNull(this.dayOfYear) > 0) {
        let leapYear = date_computation.isLeapYear(date);
        let correspondingDay = date_computation.dayOfYear(date.month, date.day, leapYear);
        this[_verify](this.dayOfYear, correspondingDay, correspondingDay, "dayOfYear", s, date);
      } else {
        this[_verify](this.day, date.day, date.day, "day", s, date);
      }
      this[_verify](this.year, date.year, date.year, "year", s, date);
    }
    [_verify](value, min, max, desc, originalInput, parsed = null) {
      let t0, t0$;
      if (value == null) dart.nullFailed(I[0], 147, 20, "value");
      if (min == null) dart.nullFailed(I[0], 147, 31, "min");
      if (max == null) dart.nullFailed(I[0], 147, 40, "max");
      if (desc == null) dart.nullFailed(I[0], 147, 52, "desc");
      if (originalInput == null) dart.nullFailed(I[0], 147, 65, "originalInput");
      if (dart.notNull(value) < dart.notNull(min) || dart.notNull(value) > dart.notNull(max)) {
        let parsedDescription = parsed == null ? "" : " Date parsed as " + dart.str(parsed) + ".";
        let errorDescription = "Error parsing " + dart.str(originalInput) + ", invalid " + dart.str(desc) + " value: " + dart.str(value) + " in " + dart.str(this[_locale$]) + " with time zone offset " + dart.str((t0$ = (t0 = parsed, t0 == null ? null : t0.timeZoneOffset), t0$ == null ? "unknown" : t0$)) + "." + " Expected value between " + dart.str(min) + " and " + dart.str(max) + "." + parsedDescription + ".";
        if (dart.notNull(this[_retried]) > 0) {
          errorDescription = errorDescription + (" Failed after " + dart.str(this[_retried]) + " retries.");
        }
        dart.throw(new core.FormatException.new(errorDescription));
      }
    }
    [_offsetYear](dateTime, offsetYears) {
      let t7, t6, t5, t4, t3, t2, t1, t0;
      if (dateTime == null) dart.nullFailed(I[0], 168, 33, "dateTime");
      if (offsetYears == null) dart.nullFailed(I[0], 168, 47, "offsetYears");
      t0 = dart.notNull(dateTime.year) + dart.notNull(offsetYears);
      t1 = dateTime.month;
      t2 = dateTime.day;
      t3 = dateTime.hour;
      t4 = dateTime.minute;
      t5 = dateTime.second;
      t6 = dateTime.millisecond;
      t7 = dateTime.isUtc;
      return this[_dateTimeConstructor$](t0, t1, t2, t3, t4, t5, t6, t7);
    }
    asDate(opts) {
      let t7, t6, t5, t4, t3, t2, t1, t0, t7$, t6$, t5$, t4$, t3$, t2$, t1$, t0$, t7$0, t6$0, t5$0, t4$0, t3$0, t2$0, t1$0, t0$0;
      let retries = opts && 'retries' in opts ? opts.retries : 3;
      if (retries == null) dart.nullFailed(I[0], 181, 24, "retries");
      if (this[_date] != null) return dart.nullCheck(this[_date]);
      let preliminaryResult = null;
      let hasCentury = !dart.test(this[_hasAmbiguousCentury]) || dart.notNull(this.year) < 0 || dart.notNull(this.year) >= 100;
      if (hasCentury) {
        preliminaryResult = (t0 = this.year, t1 = this.month, t2 = this.dayOrDayOfYear, t3 = this.hour24, t4 = this.minute, t5 = this.second, t6 = this.fractionalSecond, t7 = this.utc, this[_dateTimeConstructor$](t0, t1, t2, t3, t4, t5, t6, t7));
      } else {
        let now = $default.clock.now();
        if (dart.test(this.utc)) {
          now = now.toUtc();
        }
        let lowerDate = this[_offsetYear](now, -80);
        let upperDate = this[_offsetYear](now, 100 - 80);
        let lowerCentury = (dart.notNull(lowerDate.year) / 100)[$truncate]() * 100;
        let upperCentury = (dart.notNull(upperDate.year) / 100)[$truncate]() * 100;
        preliminaryResult = (t0$ = upperCentury + dart.notNull(this.year), t1$ = this.month, t2$ = this.dayOrDayOfYear, t3$ = this.hour24, t4$ = this.minute, t5$ = this.second, t6$ = this.fractionalSecond, t7$ = this.utc, this[_dateTimeConstructor$](t0$, t1$, t2$, t3$, t4$, t5$, t6$, t7$));
        if (dart.notNull(preliminaryResult.compareTo(upperDate)) <= 0) {
          if (!(dart.notNull(preliminaryResult.compareTo(lowerDate)) > 0)) dart.assertFailed(null, I[0], 217, 16, "preliminaryResult.compareTo(lowerDate) > 0");
        } else {
          preliminaryResult = (t0$0 = lowerCentury + dart.notNull(this.year), t1$0 = this.month, t2$0 = this.dayOrDayOfYear, t3$0 = this.hour24, t4$0 = this.minute, t5$0 = this.second, t6$0 = this.fractionalSecond, t7$0 = this.utc, this[_dateTimeConstructor$](t0$0, t1$0, t2$0, t3$0, t4$0, t5$0, t6$0, t7$0));
        }
      }
      if (dart.test(this.utc) && hasCentury) {
        this[_date] = preliminaryResult;
      } else {
        this[_date] = this[_correctForErrors](preliminaryResult, retries);
      }
      return dart.nullCheck(this[_date]);
    }
    [_correctForErrors](result, retries) {
      if (result == null) dart.nullFailed(I[0], 234, 39, "result");
      if (retries == null) dart.nullFailed(I[0], 234, 51, "retries");
      if (dart.notNull(retries) <= 0) {
        return result;
      }
      let leapYear = date_computation.isLeapYear(result);
      let resultDayOfYear = date_computation.dayOfYear(result.month, result.day, leapYear);
      if (!dart.test(this.utc) && dart.test(result.isUtc) && (result.hour != this.hour24 || result.day != resultDayOfYear || !dart.test(new core.DateTime.now().isUtc))) {
        this[_retried] = dart.notNull(this[_retried]) + 1;
        return this.asDate({retries: dart.notNull(retries) - 1});
      }
      if (dart.test(this.dateOnly) && result.hour !== 0) {
        let tryAgain = this.asDate({retries: dart.notNull(retries) - 1});
        if (!dart.equals(tryAgain, result)) {
          return tryAgain;
        }
        let expectedDayOfYear = this.dayOfYear === 0 ? date_computation.dayOfYear(this.month, this.day, leapYear) : this.dayOfYear;
        let daysPrevious = dart.notNull(expectedDayOfYear) - dart.notNull(resultDayOfYear);
        let offset = daysPrevious * 24 - dart.notNull(result.hour);
        let adjusted = result.add(new core.Duration.new({hours: offset}));
        if (adjusted.hour === 0) {
          return adjusted;
        }
        let adjustedDayOfYear = date_computation.dayOfYear(adjusted.month, adjusted.day, leapYear);
        if (adjustedDayOfYear != expectedDayOfYear) {
          return result;
        }
        return adjusted;
      }
      return result;
    }
  };
  (date_builder.DateBuilder.new = function(_locale, _dateTimeConstructor) {
    if (_locale == null) dart.nullFailed(I[0], 62, 20, "_locale");
    if (_dateTimeConstructor == null) dart.nullFailed(I[0], 62, 34, "_dateTimeConstructor");
    this[year] = 1970;
    this[month] = 1;
    this[day] = 1;
    this[dayOfYear] = 0;
    this[hour] = 0;
    this[minute] = 0;
    this[second] = 0;
    this[fractionalSecond] = 0;
    this[pm] = false;
    this[utc] = false;
    this[_hasAmbiguousCentury] = false;
    this[_date] = null;
    this[_retried] = 0;
    this[dateOnly] = false;
    this[_locale$] = _locale;
    this[_dateTimeConstructor$] = _dateTimeConstructor;
    ;
  }).prototype = date_builder.DateBuilder.prototype;
  dart.addTypeTests(date_builder.DateBuilder);
  dart.addTypeCaches(date_builder.DateBuilder);
  dart.setMethodSignature(date_builder.DateBuilder, () => ({
    __proto__: dart.getMethods(date_builder.DateBuilder.__proto__),
    setYear: dart.fnType(dart.void, [core.int]),
    setHasAmbiguousCentury: dart.fnType(dart.void, [core.bool]),
    setMonth: dart.fnType(dart.void, [core.int]),
    setDay: dart.fnType(dart.void, [core.int]),
    setDayOfYear: dart.fnType(dart.void, [core.int]),
    setHour: dart.fnType(dart.void, [core.int]),
    setMinute: dart.fnType(dart.void, [core.int]),
    setSecond: dart.fnType(dart.void, [core.int]),
    setFractionalSecond: dart.fnType(dart.void, [core.int]),
    verify: dart.fnType(dart.void, [core.String]),
    [_verify]: dart.fnType(dart.void, [core.int, core.int, core.int, core.String, core.String], [dart.nullable(core.DateTime)]),
    [_offsetYear]: dart.fnType(core.DateTime, [core.DateTime, core.int]),
    asDate: dart.fnType(core.DateTime, [], {retries: core.int}, {}),
    [_correctForErrors]: dart.fnType(core.DateTime, [core.DateTime, core.int])
  }));
  dart.setGetterSignature(date_builder.DateBuilder, () => ({
    __proto__: dart.getGetters(date_builder.DateBuilder.__proto__),
    dayOrDayOfYear: core.int,
    hour24: core.int
  }));
  dart.setLibraryUri(date_builder.DateBuilder, I[1]);
  dart.setFieldSignature(date_builder.DateBuilder, () => ({
    __proto__: dart.getFields(date_builder.DateBuilder.__proto__),
    year: dart.fieldType(core.int),
    month: dart.fieldType(core.int),
    day: dart.fieldType(core.int),
    dayOfYear: dart.fieldType(core.int),
    hour: dart.fieldType(core.int),
    minute: dart.fieldType(core.int),
    second: dart.fieldType(core.int),
    fractionalSecond: dart.fieldType(core.int),
    pm: dart.fieldType(core.bool),
    utc: dart.fieldType(core.bool),
    [_hasAmbiguousCentury]: dart.fieldType(core.bool),
    [_locale$]: dart.finalFieldType(core.String),
    [_date]: dart.fieldType(dart.nullable(core.DateTime)),
    [_retried]: dart.fieldType(core.int),
    dateOnly: dart.fieldType(core.bool),
    [_dateTimeConstructor$]: dart.finalFieldType(dart.fnType(core.DateTime, [core.int, core.int, core.int, core.int, core.int, core.int, core.int, core.bool]))
  }));
  dart.trackLibraries("packages/intl/src/intl/date_builder.dart", {
    "package:intl/src/intl/date_builder.dart": date_builder
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["date_builder.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/intl/src/intl/date_builder.dart.lib.js"}');
  // Exports:
  return {
    src__intl__date_builder: date_builder
  };
}));

//# sourceMappingURL=date_builder.dart.lib.js.map
